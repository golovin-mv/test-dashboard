{"version":3,"sources":["socket.js","storage.js","components/Entities.jsx","containers/EntitiesContainer.jsx","components/Entity.jsx","containers/EntityContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["socket","listners","state","entities","userSetting","tableUpdateDelay","entityUpdateDelay","paramsAggregators","Array","fill","getState","updateState","data","Object","assign","forEach","cb","onUndate","push","client","io","updateEntitiesWithSocket","emit","updateEntityWithSocket","id","updateEntity","initMessages","stateGetter","stateSetter","on","entity","options","label","value","sum","arr","reduce","acc","val","aggregator","min","Math","max","avg","length","rotate","matrix","map","index","IdCell","styled","td","ValueCell","props","parseFloat","children","abs","StyledTable","table","StyledSelect","select","aggregatorsArray","onIntervalChange","onAgregationChange","renderRow","params","key","href","values","toFixed","renderParams","type","onChange","e","target","i","opt","aggregated","renderSummary","currentTimeout","useState","setState","useEffect","update","timeout","setTimeout","updateEntities","clearTimeout","Entities","v","keys","renderEntityParams","URL","window","location","searchParams","get","setEntity","Entity","runSocket","NotFound","Router","EntitiesContainer","EntityContainer","SimpleReactRouter","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3063dee.chunk.js","sourcesContent":["import io from \"socket.io-client\";\nimport { updateState, getState } from \"./storage\";\n\nconst SOCKET_URL = \"http://localhost:3000\";\n\nconst client = io(SOCKET_URL);\n\nconst initMessages = (socket, stateGetter, stateSetter) => () => {\n  socket.on(\"reseive-entities\", (entities) =>\n    stateSetter({\n      entities,\n    })\n  );\n\n  socket.on(\"reseive-entity\", (entity) => entity &&\n    stateSetter({\n      entities: {\n        ...stateGetter().entities,\n        [entity.id]: entity,\n      },\n    })\n  );\n};\n\nconst updateEntities = (socket) => () => socket.emit(\"entities\");\n\nconst updateEntity = (socket) => (id) => socket.emit(\"entity\", { id });\n\nconst updateEntitiesWithSocket = updateEntities(client);\n\nconst updateEntityWithSocket = updateEntity(client);\n\nexport default initMessages(client, getState, updateState);\n\nexport { updateEntitiesWithSocket as updateEntities };\n\nexport { updateEntityWithSocket as updateEntity}\n","const listners = [];\n\nlet state = {\n  entities: {},\n  userSetting: {\n    tableUpdateDelay: 3000,\n    entityUpdateDelay: 3000,\n    paramsAggregators: Array(20).fill('sum')\n  },\n};\n\nconst getState = () => state;\n\nconst updateState = (data) => {\n  state = Object.assign({}, state, data);\n  listners.forEach((cb) => cb());\n};\n\nconst onUndate = (cb) => listners.push(cb);\n\nexport { getState, updateState, onUndate };\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"simple-react-router\";\n\nconst options = [\n  { label: \"sum\", value: \"sum\" },\n  { label: \"min\", value: \"min\" },\n  { label: \"max\", value: \"max\" },\n  { label: \"avg\", value: \"avg\" },\n];\n\nconst sum = (arr = []) => arr.reduce((acc, val) => acc + val);\n\nconst min = (arr = []) => Math.min(...arr);\n\nconst max = (arr = []) => Math.max(...arr);\n\nconst avg = (arr = []) => sum(arr) / arr.length;\n\nconst aggregator = {\n  sum,\n  min,\n  max,\n  avg,\n};\n\nconst getBackground = (val) => {\n  if (val === 0) {\n    return \"rgb(255, 255, 255)\";\n  }\n\n  if (val < 0) {\n    return `rgba(255, 140, 0, ${Math.abs(val)})`;\n  }\n\n  return `rgba(0, 0, 0, ${Math.abs(val)})`;\n};\n\nconst getColor = (val) => {\n  if (val > 0.5) {\n    return \"#fff\";\n  }\n  return `#000`;\n};\n\nconst rotate = (matrix = []) =>\n  matrix[0]\n    ? matrix[0].map((val, index) => matrix.map((val) => val[index]))\n    : [];\nconst IdCell = styled.td`\n  background-color: #c4c4c4;\n  color: #000;\n  padding: 0.4em;\n`;\n\nconst ValueCell = styled.td`\n  background-color: ${(props) => getBackground(parseFloat(props.children))};\n  color: ${(props) => getColor(parseFloat(props.children))};\n  mix-blend-mode: difference;\n  padding: 0.4em;\n`;\n\nconst StyledTable = styled.table`\n  width: 100%;\n  text-align: center;\n`;\n\nconst StyledSelect = styled.select`\n  width: 100%;\n  padding: 0.4em;\n`;\n\nexport default ({\n  entities,\n  onIntervalChange,\n  onAgregationChange,\n  userSetting: { tableUpdateDelay, paramsAggregators },\n}) => {\n  const renderParams = (params) =>\n    Object.values(params).map((val) => <ValueCell key={val}>{val.toFixed(4)}</ValueCell>);\n\n  const renderTableHeader = (aggregatorsArray) =>\n    Object.values(aggregatorsArray).map((val, i) => (\n      <th key={val + i}>\n        <StyledSelect onChange={(e) => onAgregationChange(i, e.target.value)} value={aggregatorsArray[i]}>\n          {options.map((opt) => (\n            <option\n              value={opt.value}\n              key={opt.value + i}\n            >\n              {opt.label}\n            </option>\n          ))}\n        </StyledSelect>\n      </th>\n    ));\n\n  const renderRow = (entity) => {\n    const { id, ...params } = entity;\n    return (\n      <tr key={id}>\n        <IdCell>\n          <Link  href={`/entity/?id=${id}`}>{id}</Link>\n        </IdCell>\n        {renderParams(params)}\n      </tr>\n    );\n  };\n\n  const renderEntities = (arr) =>\n    Object.values(arr).map((val) => renderRow(val));\n\n  const renderSummary = (entities = {}) =>\n    rotate(\n      Object.values(entities).map((entity) => {\n        const { id, ...params } = entity;\n        return Object.values(params);\n      })\n    )\n      .reduce((acc, val, i) => {\n        acc.push(aggregator[paramsAggregators[i]](val));\n        return acc;\n      }, [])\n      .map((aggregated) => <td key={aggregated}>{aggregated.toFixed(4)}</td>);\n\n  return (\n    <div>\n      <div>\n        <span>Интервал обновления ms: </span>\n        <input\n          min=\"100\"\n          value={tableUpdateDelay}\n          type=\"number\"\n          onChange={(e) => onIntervalChange(e.target.value)}\n        ></input>\n      </div>\n      <StyledTable>\n        <thead>\n          <tr>\n          <th key=\"idth\"></th>\n            {renderTableHeader(paramsAggregators)}\n          </tr>\n        </thead>\n        <tbody>\n          {renderEntities(entities)}\n          <tr>\n            <td>ИТОГО:</td>\n            {renderSummary(entities)}\n          </tr>\n        </tbody>\n      </StyledTable>\n    </div>\n  );\n};\n","import { updateEntities } from \"../socket\";\nimport React, { useState, useEffect } from \"react\";\nimport { getState, onUndate, updateState } from \"../storage\";\nimport Entities from \"../components/Entities\";\n\nlet currentTimeout = null;\n\nconst update = (timeout = 0) =>\n  (currentTimeout = setTimeout(() => {\n    updateEntities();\n    update(getState().userSetting.tableUpdateDelay);\n  }, timeout));\n\nexport default (props) => {\n  const [state, setState] = useState(getState());\n\n  useEffect(() => {\n    onUndate(() => setState(getState()));\n  });\n\n  useEffect(() => {\n    update();\n    return  () => clearTimeout(currentTimeout);\n  }, []);\n\n  const onIntervalChange = (v) =>\n    v > 100 &&\n    updateState({\n      userSetting: {\n        ...getState().userSetting,\n        tableUpdateDelay: v,\n      },\n    });\n\n  const onAgregationChange = (index, val) =>\n    updateState({\n      userSetting: {\n        ...getState().userSetting,\n        paramsAggregators: (() => {\n          const arr = [...getState().userSetting.paramsAggregators];\n          arr[index] = val;\n          return arr;\n        })(),\n      },\n    });\n\n  return (\n    <Entities\n      onAgregationChange={onAgregationChange}\n      onIntervalChange={onIntervalChange}\n      {...props}\n      {...state}\n    />\n  );\n};\n","import React from \"react\";\n\nexport default ({ entity, onIntervalChange, entityUpdateDelay }) => {\n  const renderEntityParams = (entity) => {\n    const { id, ...params } = entity;\n\n    return Object.keys(params).map((key) => (\n      <div>\n        {key}: {params[key]}\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <div>\n        <span>Интервал обновления ms: </span>\n        <input\n          min=\"100\"\n          value={entityUpdateDelay}\n          type=\"number\"\n          onChange={(e) => onIntervalChange(e.target.value)}\n        ></input>\n      </div>\n      {entity && (\n        <div>\n          <h1>{entity.id}</h1>\n          {renderEntityParams(entity)}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { updateEntity } from \"../socket\";\nimport { getState, onUndate, updateState } from \"../storage\";\nimport Entity from \"../components/Entity\";\n\nlet currentTimeout = null;\n\nconst update = (id, timeout = 0) =>\n  (currentTimeout = setTimeout(() => {\n    updateEntity(id);\n    update(id, getState().userSetting.entityUpdateDelay);\n  }, timeout));\n\nexport default (props) => {\n  const id = new URL(window.location.href).searchParams.get(\"id\");\n\n  const [entity, setEntity] = useState(getState().entities[id]);\n  const [state, setState] = useState(getState());\n  \n  useEffect(() => {\n    onUndate(() => {\n      setEntity(getState().entities[id]);\n      setState(getState());\n    });\n  });\n\n  useEffect(() => {\n    update(id);\n    \n    return () => clearTimeout(currentTimeout);\n  }, []);\n\n  const onIntervalChange = (v) =>\n    v > 100 &&\n    updateState({\n      userSetting: {\n        ...getState().userSetting,\n        entityUpdateDelay: v,\n      },\n    });\n\n  return <Entity onIntervalChange={onIntervalChange} entity={entity} entityUpdateDelay={state.userSetting.entityUpdateDelay} {...props} />;\n};\n","import React from \"react\";\nimport runSocket from \"./socket\";\nimport SimpleReactRouter from \"simple-react-router\";\nimport EntitiesContainer from \"./containers/EntitiesContainer.jsx\";\nimport EntityContainer from './containers/EntityContainer';\nrunSocket();\n\nconst NotFound = () => <h1>404! Not found</h1>;\n\nexport default class Router extends SimpleReactRouter {\n  routes(map) {\n    map(\"/\", EntitiesContainer);\n    map(\"/entity\", EntityContainer);\n    map(\"/:path*\", NotFound);\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}